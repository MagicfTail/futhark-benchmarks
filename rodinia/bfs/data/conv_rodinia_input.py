#!/usr/bin/env python3
#
# Convert Rodinia BFS input to Futhark BFS input, so that the Futhark version
# can be run on the same datasets as the Rodinia version.
#
# The Rodinia input is generated by their 'graphgen.cpp' utility.

import sys

def parse(filename):
    with open(filename) as f:
        d = f.read()
    d = d.strip()
    nodes, source, edges = d.split('\n\n')

    nodes = nodes.split('\n')
    n_nodes = int(nodes[0])
    nodes = nodes[1:]
    assert(len(nodes) == n_nodes)
    nodes = [tuple(int(num) for num in line.split(' ')) for line in nodes]

    source = int(source)
    assert source == 0 # Rodinia idiosyncracy.  Uncomment if necessary.

    edges = edges.split('\n')
    n_edges = int(edges[0])
    edges = edges[1:]
    assert(len(edges) == n_edges)
    edges = [tuple(int(num) for num in line.split(' ')) for line in edges]

    return (nodes, edges)

def format_futhark(nodes, edges):
    a = str([start_index for start_index, _n_edges in nodes])
    b = str([n_edges for _start_index, n_edges in nodes])
    c = str([edges_dest for edges_dest, _edges_weight in edges])

    return '\n'.join((a, b, c))

def main(args):
    try:
        filename = args[0]
    except IndexError:
        print('error: missing filename argument', file=sys.stderr)
        return 1

    nodes, edges = parse(filename)
    print(format_futhark(nodes, edges))

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
