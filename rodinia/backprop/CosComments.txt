# backprop

# Description of Parallelism

Benchmark was modified to fill in datastructures internally using Sobol random numbers;
It receives as arguments the Sobol direction vectors, and N_IN.

For the small dataset N_IN is 128, but is the only dimension that scales.

N_HID = 16 and N_OUT = 1 statically :-(

The computational kernel consists of:

0. function bpnn_layerforward is defined as:

            fun [f32,n2]
            bpnn_layerforward([f32,n1] l1, [[f32,n2],n1] conn, [f32,n2] conn_fstrow) =
                let connT     = transpose(conn) in
                let res_tmp   = map ( fn f32 ([f32,n1] conn_tr_row) =>
                                        let prods = zipWith(*, conn_tr_row, l1) in
                                        reduce(+, 0.0, prods)
                                  , connT ) in
                map ( fn f32 (f32 pr, f32 conn0) => squash(pr+conn0)
                    , zip(res_tmp, conn_fstrow) )

1. first call to function bpnn_layerforward
    nested map-redomap structure, with: 
        - the outer map on N_HID, the inner redomap on N_IN
          NOTE: we can make N_IN very large => we can
                sequentialize the outer map (since N_HID is on 16)

2. second call to function bpnn_layerforward
    nested map-redomap structure, with: 
        - the outer map on N_OUT, the inner redomap on N_HID
          NOTE: as before, sequentialize the outer map 
                (since N_OUT is on 1), keep the reduce parallel;
                it's not going to give speedup but at least runs
                on GPU.

3. function bpnn_output_error => a redomap on N_OUT (pity it has size only 1)

4. function bpnn_hidden_error => a map-redomap nest:
        - the outer map is on N_HID (parallel)
        - the inner redomap is on N_OUT (sequentialize, please)

5. first call to function bpnn_adjust_weights: two nested maps
        - outer map of size N_HID+1 (17)
        - inner map of size N_OUT    (1)
    
6. second call to function bpnn_adjust_weights: two nested maps
        - outer map of size N_IN+1 (129)
        - inner map of size N_HID   (16)

THAT's ALL!

#########################
# Approximate Runtimes: #
#########################

Sequential Total Runtime Rodinia: 1.68 sec
Sequential Total Runtime Futhark: 2.26 sec

OpenCL Training Runtime Rodinia (without initialization): 0.292 sec, from which
    Device<->Host Transfer time: 0.218 sec
    Kernel time:                 0.074 sec

OpenCL Total    Runtime Futhark: 
        NEW VERSION: 0.031429 total time
            (still the segmented reduction is naively implemented via segmented scan)

        OLD VERSION
        0.245 sec (total runtime, including initialization) 
        (These are still poor results are because of bpnn_layerforward,
         where the segmented reduction, i.e., outer map -- inner redomap,
         is parallelizing the map (which has small size) and is 
         sequentializing the inner redomap, which has large size.

